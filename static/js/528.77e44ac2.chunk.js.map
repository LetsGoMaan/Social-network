{"version":3,"file":"static/js/528.77e44ac2.chunk.js","mappings":"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","sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__-vh02\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport const ProfileStatusWithHooks = (props: PropsType) => {\r\n\r\n    const [editMode, setEditMote] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n     useEffect(() => {\r\n         setStatus(props.status)\r\n     }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMote(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMote(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode\r\n                ?\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || \"-----\"}</span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus onBlur={deactivateEditMode} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from \"react\";\r\nimport classes from \"./ProfileInfo.module.css\"\r\nimport {ProfileType} from \"../ProfileContainer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if(!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <>\r\n            <div>\r\n                <img src=\"https://i.ytimg.com/vi/ZXsQAXx_ao0/maxresdefault.jpg\" alt=\"\"/>\r\n            </div>\r\n            <div className={classes.descriptionBlock}>\r\n                <div>{props.profile.fullName}</div>\r\n                <img src={props.profile.photos.large} alt=\"profilePhoto\"/>\r\n                <div>{props.profile.aboutMe}</div>\r\n            </div>\r\n            {/*<ProfileStatus status={props.status} updateStatus={props.updateStatus}/>*/}\r\n            <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n        </>\r\n    );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__FIclz\",\"posts\":\"MyPosts_posts__f--rz\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__cLqfH\"};","import React from \"react\";\r\nimport classes from \"./Post.module.css\";\r\n\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\n\r\n\r\nexport const Post = (props: PostPropsType) => {\r\n    return (\r\n        <>\r\n            <div className={classes.post}>\r\n                <img src=\"https://cdn.iconscout.com/icon/free/png-256/avatar-370-456322.png\" alt=\"avatar\"/>\r\n                {props.message}\r\n                <div>\r\n                    <span> likes {props.likesCount}</span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n","import React from \"react\";\r\nimport classes from \"./MyPosts.module.css\"\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostsType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostsType>\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport const MyPosts = React.memo((props:MyPostsPropsType) => {\r\n\r\n    const postsElements = props.posts.map(p =>  <Post key={p.id} message={p.message} likesCount={p.likesCount}/> )\r\n\r\n    const onAddPost = (values: any) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.postBlock}>\r\n                <h3>My posts</h3>\r\n                <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n                <div>\r\n                    New posts\r\n                </div>\r\n                <div className={classes.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n});\r\n\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={\"newPostText\"} placeholder={\"Start new post\"} component={Textarea}\r\n                       validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormDataType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)","import React from \"react\";\r\nimport {addPostActionCreator, PostsType} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n// type MyPostsPropsType = {\r\n//     // store: StoreType\r\n//     // posts: Array<PostsType>\r\n//     // dispatch: (action: ActionsType) => void\r\n//     // // addPost: () => void\r\n//     // newPostText: string\r\n//     // // updateNewPostText: (newText: string) => void\r\n// }\r\n\r\n// export const MyPostsContainer = (props: MyPostsPropsType) => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//             (store) => {\r\n//                 let state = store.getState()\r\n//                 const onAddPost = () => {\r\n//                     store.dispatch(addPostActionCreator())\r\n//                 }\r\n//                 const onPostChange = (text: string) => {\r\n//                     store.dispatch(updateNewPostTextActionCreator(text))\r\n//                 }\r\n//                 return (\r\n//                     <>\r\n//                         <MyPosts addPost={onAddPost}\r\n//                                  updateNewPostText={onPostChange}\r\n//                                  posts={store.getState().profilePage.posts}\r\n//                                  newPostText={store.getState().profilePage.newPostText}/>\r\n//                     </>\r\n//                 )\r\n//             }\r\n//         }\r\n//         </StoreContext.Consumer>\r\n//\r\n//     );\r\n// };\r\ntype MapStatePropsType = {\r\n    posts: Array<PostsType>\r\n}\r\n\r\ntype MapDispatchProps = {\r\n    addPost: (newPostText: string) => void\r\n\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType):MapStatePropsType => {\r\n    return {\r\n            posts: state.profilePage.posts,\r\n\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch):MapDispatchProps => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        },\r\n\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"./ProfileContainer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const Profile = (props:ProfilePropsType) => {\r\n\r\n    return (\r\n        <>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n        </>\r\n    );\r\n};\r\n\r\n","import React, {ComponentType} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type ProfileType = {\r\n    photos: PhotosType\r\n    fullName: string\r\n    aboutMe: string\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapDispatchProps = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: string\r\n    isAuth: boolean\r\n}\r\n\r\ntype ProfileContainerType = MapStateToPropsType & MapDispatchProps\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        console.log(userId)\r\n        // let userId\r\n        // console.log('props ', this.props)\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        )\r\n\r\n\r\n    }\r\n}\r\n\r\nlet\r\n    mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n        return {\r\n            profile: state.profilePage.profile,\r\n            status: state.profilePage.status,\r\n            authorizedUserId: state.auth.userId,\r\n            isAuth: state.auth.isAuth,\r\n        }\r\n    }\r\n\r\nexport default compose<ComponentType>(connect\r\n\r\n    (\r\n        mapStateToProps\r\n        , {\r\n            getUserProfile\r\n            ,\r\n            getStatus\r\n            ,\r\n            updateStatus\r\n        }\r\n    ),\r\n    withRouter, withAuthRedirect\r\n)\r\n(ProfileContainer)\r\n\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype mapStateToProps = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType):mapStateToProps => ({\r\n        isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: mapStateToProps) =>  {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n\r\n}\r\n\r\n"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMote","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","onDoubleClick","ProfileInfo","profile","src","alt","className","classes","fullName","photos","large","aboutMe","Preloader","Post","message","likesCount","maxLength10","maxLengthCreator","MyPosts","React","postsElements","posts","map","p","id","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","reduxForm","form","handleSubmit","Field","name","placeholder","component","Textarea","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","console","log","authorizedUserId","history","push","getUserProfile","getStatus","compose","auth","isAuth","withRouter","withAuthRedirect","mapStateToProps","Component","restProps","to"],"sourceRoot":""}
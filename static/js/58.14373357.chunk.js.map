{"version":3,"file":"static/js/58.14373357.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__-vh02\",\"mainPhoto\":\"ProfileInfo_mainPhoto__t0tck\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport const ProfileStatusWithHooks = (props: PropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n     useEffect(() => {\r\n         setStatus(props.status)\r\n     }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode\r\n                ?\r\n                <div>\r\n                    <b>Status:</b><span onDoubleClick={activateEditMode}>{props.status || \"-----\"}</span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus onBlur={deactivateEditMode} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport classes from \"./ProfileInfo.module.css\"\r\nimport styles from \"../../common/FormsControls/FormsControls.module.css\"\r\nimport {ProfileType} from \"../ProfileContainer\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.StatelessComponent<PropsType & InjectedFormProps<{}, PropsType>> = ({profile, handleSubmit,error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button onClick={() => {\r\n                }}>Save\r\n                </button>\r\n                {error && <div className={styles.formSummaryError}>\r\n                    {error}\r\n                </div>}\r\n            </div>\r\n            <div>\r\n                <b>Full name:</b>: {createField(\"Full name\", \"fullName\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>: {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About Me</b>: {createField(\"About Me\", \"aboutMe\", [], Textarea)}\r\n            </div>\r\n\r\n\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key} className={classes.contact}>\r\n                    <b>{key}: {createField(key, \"fullName.\" + key, [], Input)}</b>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<{}, PropsType>({form: \"edit-profile\"})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport classes from \"./ProfileInfo.module.css\"\r\nimport {ProfileType} from \"../ProfileContainer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (formData: any) => Promise<any>\r\n}\r\n\r\n\r\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: any) => {\r\n        props.saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n            <div>\r\n                <img style={{width: \"400px\"}} src=\"https://i.ytimg.com/vi/ZXsQAXx_ao0/maxresdefault.jpg\" alt=\"\"/>\r\n            </div>\r\n            <div className={classes.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userPhoto} className={classes.mainPhoto} alt=\"profilePhoto\"/>\r\n                {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n                {editMode ? <ProfileDataForm  profile={props.profile} onSubmit={onSubmit}/> :\r\n                    <ProfileData profile={props.profile} isOwner={props.isOwner} goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }}/>}\r\n\r\n                {/*<ProfileStatus status={props.status} updateStatus={props.updateStatus}/>*/}\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: any) => { /// fix any\r\n\r\n    return (\r\n        <div>\r\n            {isOwner && <div>\r\n                <button onClick={goToEditMode}>edit</button>\r\n            </div>}\r\n            <div>\r\n                <b>Full name:</b>: {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile.lookingForAJob ?\r\n                <div>\r\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                </div> : <></>\r\n            }\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}: ContactPropsType) => {\r\n    return <div className={classes.contact}>\r\n        <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__FIclz\",\"posts\":\"MyPosts_posts__f--rz\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__cLqfH\"};","import React from \"react\";\r\nimport classes from \"./Post.module.css\";\r\n\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\n\r\n\r\nexport const Post = (props: PostPropsType) => {\r\n    return (\r\n        <>\r\n            <div className={classes.post}>\r\n                <img src=\"https://cdn.iconscout.com/icon/free/png-256/avatar-370-456322.png\" alt=\"avatar\"/>\r\n                {props.message}\r\n                <div>\r\n                    <span> likes {props.likesCount}</span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n","import React from \"react\";\r\nimport classes from \"./MyPosts.module.css\"\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostsType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostsType>\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport const MyPosts = React.memo((props:MyPostsPropsType) => {\r\n\r\n    const postsElements = props.posts.map(p =>  <Post key={p.id} message={p.message} likesCount={p.likesCount}/> )\r\n\r\n    const onAddPost = (values: any) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.postBlock}>\r\n                <h3>My posts</h3>\r\n                <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n                <div>\r\n                    New posts\r\n                </div>\r\n                <div className={classes.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n});\r\n\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={\"newPostText\"} placeholder={\"Start new post\"} component={Textarea}\r\n                       validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormDataType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)","import React from \"react\";\r\nimport {addPostActionCreator, PostsType} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n// type MyPostsPropsType = {\r\n//     // store: StoreType\r\n//     // posts: Array<PostsType>\r\n//     // dispatch: (action: ActionsType) => void\r\n//     // // addPost: () => void\r\n//     // newPostText: string\r\n//     // // updateNewPostText: (newText: string) => void\r\n// }\r\n\r\n// export const MyPostsContainer = (props: MyPostsPropsType) => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//             (store) => {\r\n//                 let state = store.getState()\r\n//                 const onAddPost = () => {\r\n//                     store.dispatch(addPostActionCreator())\r\n//                 }\r\n//                 const onPostChange = (text: string) => {\r\n//                     store.dispatch(updateNewPostTextActionCreator(text))\r\n//                 }\r\n//                 return (\r\n//                     <>\r\n//                         <MyPosts addPost={onAddPost}\r\n//                                  updateNewPostText={onPostChange}\r\n//                                  posts={store.getState().profilePage.posts}\r\n//                                  newPostText={store.getState().profilePage.newPostText}/>\r\n//                     </>\r\n//                 )\r\n//             }\r\n//         }\r\n//         </StoreContext.Consumer>\r\n//\r\n//     );\r\n// };\r\ntype MapStatePropsType = {\r\n    posts: Array<PostsType>\r\n}\r\n\r\ntype MapDispatchProps = {\r\n    addPost: (newPostText: string) => void\r\n\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType):MapStatePropsType => {\r\n    return {\r\n            posts: state.profilePage.posts,\r\n\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch):MapDispatchProps => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        },\r\n\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"./ProfileContainer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: () => Promise<any>\r\n}\r\n\r\nexport const Profile = (props:ProfilePropsType) => {\r\n\r\n    return (\r\n        <>\r\n            <ProfileInfo savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} saveProfile={props.saveProfile} />\r\n            <MyPostsContainer />\r\n        </>\r\n    );\r\n};\r\n\r\n","import React, {ComponentType} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nexport type PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type ContactsType = {\r\n    github?: string\r\n    vk?: string\r\n    facebook?: string\r\n    instagram?: string\r\n    twitter?: string\r\n    website?: string\r\n    youtube?: string\r\n    mainLink?: string\r\n\r\n}\r\n\r\nexport type ProfileType = {\r\n    photos: PhotosType\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    contacts: any\r\n\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapDispatchProps = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: () => Promise<any>\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: string\r\n    isAuth: boolean\r\n\r\n}\r\n\r\ntype ProfileContainerType = MapStateToPropsType & MapDispatchProps\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile () {\r\n        let userId = this.props.match.params.userId\r\n        console.log(userId)\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n\r\n\r\n    }\r\n}\r\n\r\nlet\r\n    mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n        return {\r\n            profile: state.profilePage.profile,\r\n            status: state.profilePage.status,\r\n            authorizedUserId: state.auth.userId,\r\n            isAuth: state.auth.isAuth,\r\n        }\r\n    }\r\n\r\nexport default compose<ComponentType>(connect(mapStateToProps,\r\n        {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter, withAuthRedirect)(ProfileContainer)\r\n\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype mapStateToProps = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType):mapStateToProps => ({\r\n        isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: mapStateToProps) =>  {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n\r\n}\r\n\r\n"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","onDoubleClick","reduxForm","form","profile","handleSubmit","error","onSubmit","onClick","className","styles","createField","Input","type","Textarea","Object","keys","contacts","map","key","classes","ProfileInfo","Preloader","style","width","src","alt","photos","large","userPhoto","isOwner","target","files","length","savePhoto","formData","saveProfile","then","ProfileData","goToEditMode","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Contact","contactTitle","contactValue","Post","message","likesCount","maxLength10","maxLengthCreator","MyPosts","React","postsElements","posts","p","id","AddNewPostFormRedux","values","addPost","newPostText","Field","name","placeholder","component","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","console","log","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","withRouter","withAuthRedirect","mapStateToProps","Component","restProps","to"],"sourceRoot":""}
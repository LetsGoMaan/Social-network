{"version":3,"file":"static/js/3.7d9debd1.chunk.js","mappings":"wKACA,G,QAA0B,0BAA1B,EAAiE,6BAAjE,EAAuG,wBAAvG,EAAwI,wBAAxI,EAA2K,0BAA3K,EAA+M,yB,mBCQlMA,EAAa,SAACC,GACvB,IAAMC,EAAO,YAAcD,EAAME,GACjC,OACI,iBAAKC,UAAWC,EAAiB,IAAMA,EAAvC,WACI,gBAAKC,IAAI,oEAAoEC,IAAI,YACjF,UAAC,KAAD,CAASC,GAAIN,EAAb,cAAqBD,EAAMQ,KAA3B,WCPCC,EAAU,SAACT,GACpB,OACI,gBAAKG,UAAWC,EAAhB,SAAkCJ,EAAMU,W,uCCuC1CC,GAAcC,EAAAA,EAAAA,GAAiB,IAc/BC,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,wBAA/BD,EAZsC,SAACd,GAC/D,OACI,kBAAMgB,SAAUhB,EAAMiB,aAAtB,WACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EACXC,YAAa,qBACbb,KAAM,iBACNc,SAAU,CAACC,EAAAA,EAASZ,MAC3B,2C,6BCvBZ,GALyBa,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,KAdkB,SAACC,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAGF,SAACC,GACtB,MAAO,CACHC,WAAY,SAACC,GACTF,GAASG,EAAAA,EAAAA,IAAwBD,SAOzCE,EAAAA,EAFqBR,EDTF,SAACxB,GACpB,IAAI0B,EAAQ1B,EAAM2B,YAEZM,EAAkBP,EAAMQ,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAACrC,EAAD,CAAuBS,KAAM4B,EAAE5B,KAAMN,GAAIkC,EAAElC,IAA1BkC,EAAElC,OAC5DmC,EAAkBX,EAAMY,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC9B,EAAD,CAAoBC,QAAS6B,EAAE7B,SAAjB6B,EAAErC,OAQhE,OACI,+BACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK6B,KAEL,iBAAK9B,UAAWC,EAAhB,UACKiC,GACD,SAACxB,EAAD,CAAqBG,SAdjB,SAACwB,GACjBxC,EAAM6B,WAAWW,EAAOV,+B,gIElB5BW,EAAkB,SAACf,GAAD,MAAyC,CACvDgB,OAAQhB,EAAMiB,KAAKD,SAGpB,SAASV,EAAqBY,GASjC,OAAOnB,EAAAA,EAAAA,IAAQgB,EAARhB,EAPmB,SAACzB,GACvB,IAAK0C,EAAwB1C,EAAxB0C,OAAWG,GAAhB,OAA6B7C,EAA7B,GACA,OAAK0C,GAEE,SAACE,GAAD,UAAeC,KAFF,SAAC,KAAD,CAAUtC,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__V-GBA\",\"dialogsItem\":\"Dialogs_dialogsItem__qB0Rz\",\"active\":\"Dialogs_active__ZPAjb\",\"dialog\":\"Dialogs_dialog__Av7ON\",\"messages\":\"Dialogs_messages__3BbmZ\",\"message\":\"Dialogs_message__ZVNhf\"};","import classes from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n    const path = \"/dialogs/\" + props.id\r\n    return (\r\n        <div className={classes.dialog + \" \" + classes.active}>\r\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/avatar-370-456322.png\" alt=\"avatar\"/>\r\n            <NavLink to={path}> {props.name} </NavLink>\r\n        </div>\r\n    )\r\n}","import classes from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={classes.message}>{props.message}</div>\r\n    )\r\n}","import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\"\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPageType} from \"../../App\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: DialogsPageType\r\n    addMessage: (newMessageText: string) => void\r\n    updateNewMessageText: (newText: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageText: string\r\n}\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    let state = props.dialogsPage\r\n\r\n    const dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n    const messagesElement = state.messages.map(m => <Message key={m.id} message={m.message}/>)\r\n\r\n    let addNewMessage = (values: any) => {\r\n        props.addMessage(values.newMessageText)\r\n    }\r\n\r\n    // if(!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.dialogs}>\r\n                <div className={classes.dialogsItem}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={classes.messages}>\r\n                    {messagesElement}\r\n                    <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n                </div>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea}\r\n                   placeholder={\"Enter your message\"}\r\n                   name={\"newMessageText\"}\r\n                   validate={[required,maxLength50]}/>\r\n            <button>Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n","import React, {ComponentType} from \"react\";\r\nimport {addMessageActionCreator} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {DialogsPageType} from \"../../App\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\ntype MapDispatchProps = {\r\n    addMessage: (newMessageText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType) : MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch):MapDispatchProps => {\r\n    return {\r\n        addMessage: (newMessageText: string) => {\r\n            dispatch(addMessageActionCreator(newMessageText))\r\n        },\r\n    }\r\n}\r\n\r\nconst DialogsContainer = compose<ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect)\r\n    (Dialogs)\r\n\r\nexport default DialogsContainer\r\n\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype mapStateToProps = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType):mapStateToProps => ({\r\n        isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: mapStateToProps) =>  {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n\r\n}\r\n\r\n"],"names":["DialogItem","props","path","id","className","classes","src","alt","to","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","compose","connect","state","dialogsPage","dispatch","addMessage","newMessageText","addMessageActionCreator","withAuthRedirect","dialogsElements","dialogs","map","d","messagesElement","messages","m","values","mapStateToProps","isAuth","auth","Component","restProps"],"sourceRoot":""}